// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cperrin88/gotya/pkg/orchestrator (interfaces: ArtifactResolver,ArtifactReverseResolver,ArtifactManager,Downloader)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/orchestrator.go . ArtifactResolver,ArtifactReverseResolver,ArtifactManager,Downloader
//

// Package mock_orchestrator is a generated GoMock package.
package mock_orchestrator

import (
	context "context"
	reflect "reflect"

	download "github.com/cperrin88/gotya/pkg/download"
	model "github.com/cperrin88/gotya/pkg/model"
	gomock "go.uber.org/mock/gomock"
)

// MockArtifactResolver is a mock of ArtifactResolver interface.
type MockArtifactResolver struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactResolverMockRecorder
	isgomock struct{}
}

// MockArtifactResolverMockRecorder is the mock recorder for MockArtifactResolver.
type MockArtifactResolverMockRecorder struct {
	mock *MockArtifactResolver
}

// NewMockArtifactResolver creates a new mock instance.
func NewMockArtifactResolver(ctrl *gomock.Controller) *MockArtifactResolver {
	mock := &MockArtifactResolver{ctrl: ctrl}
	mock.recorder = &MockArtifactResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactResolver) EXPECT() *MockArtifactResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockArtifactResolver) Resolve(ctx context.Context, requests []model.ResolveRequest) (model.ResolvedArtifacts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", ctx, requests)
	ret0, _ := ret[0].(model.ResolvedArtifacts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockArtifactResolverMockRecorder) Resolve(ctx, requests any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockArtifactResolver)(nil).Resolve), ctx, requests)
}

// MockArtifactReverseResolver is a mock of ArtifactReverseResolver interface.
type MockArtifactReverseResolver struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactReverseResolverMockRecorder
	isgomock struct{}
}

// MockArtifactReverseResolverMockRecorder is the mock recorder for MockArtifactReverseResolver.
type MockArtifactReverseResolverMockRecorder struct {
	mock *MockArtifactReverseResolver
}

// NewMockArtifactReverseResolver creates a new mock instance.
func NewMockArtifactReverseResolver(ctrl *gomock.Controller) *MockArtifactReverseResolver {
	mock := &MockArtifactReverseResolver{ctrl: ctrl}
	mock.recorder = &MockArtifactReverseResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactReverseResolver) EXPECT() *MockArtifactReverseResolverMockRecorder {
	return m.recorder
}

// ReverseResolve mocks base method.
func (m *MockArtifactReverseResolver) ReverseResolve(ctx context.Context, req model.ResolveRequest) (model.ResolvedArtifacts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReverseResolve", ctx, req)
	ret0, _ := ret[0].(model.ResolvedArtifacts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReverseResolve indicates an expected call of ReverseResolve.
func (mr *MockArtifactReverseResolverMockRecorder) ReverseResolve(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseResolve", reflect.TypeOf((*MockArtifactReverseResolver)(nil).ReverseResolve), ctx, req)
}

// MockArtifactManager is a mock of ArtifactManager interface.
type MockArtifactManager struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactManagerMockRecorder
	isgomock struct{}
}

// MockArtifactManagerMockRecorder is the mock recorder for MockArtifactManager.
type MockArtifactManagerMockRecorder struct {
	mock *MockArtifactManager
}

// NewMockArtifactManager creates a new mock instance.
func NewMockArtifactManager(ctrl *gomock.Controller) *MockArtifactManager {
	mock := &MockArtifactManager{ctrl: ctrl}
	mock.recorder = &MockArtifactManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactManager) EXPECT() *MockArtifactManagerMockRecorder {
	return m.recorder
}

// GetInstalledArtifacts mocks base method.
func (m *MockArtifactManager) GetInstalledArtifacts() ([]*model.InstalledArtifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstalledArtifacts")
	ret0, _ := ret[0].([]*model.InstalledArtifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstalledArtifacts indicates an expected call of GetInstalledArtifacts.
func (mr *MockArtifactManagerMockRecorder) GetInstalledArtifacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstalledArtifacts", reflect.TypeOf((*MockArtifactManager)(nil).GetInstalledArtifacts))
}

// GetOrphanedAutomaticArtifacts mocks base method.
func (m *MockArtifactManager) GetOrphanedAutomaticArtifacts() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrphanedAutomaticArtifacts")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrphanedAutomaticArtifacts indicates an expected call of GetOrphanedAutomaticArtifacts.
func (mr *MockArtifactManagerMockRecorder) GetOrphanedAutomaticArtifacts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrphanedAutomaticArtifacts", reflect.TypeOf((*MockArtifactManager)(nil).GetOrphanedAutomaticArtifacts))
}

// InstallArtifact mocks base method.
func (m *MockArtifactManager) InstallArtifact(ctx context.Context, desc *model.IndexArtifactDescriptor, localPath string, reason model.InstallationReason) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallArtifact", ctx, desc, localPath, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallArtifact indicates an expected call of InstallArtifact.
func (mr *MockArtifactManagerMockRecorder) InstallArtifact(ctx, desc, localPath, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallArtifact", reflect.TypeOf((*MockArtifactManager)(nil).InstallArtifact), ctx, desc, localPath, reason)
}

// UninstallArtifact mocks base method.
func (m *MockArtifactManager) UninstallArtifact(ctx context.Context, artifactName string, purge bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UninstallArtifact", ctx, artifactName, purge)
	ret0, _ := ret[0].(error)
	return ret0
}

// UninstallArtifact indicates an expected call of UninstallArtifact.
func (mr *MockArtifactManagerMockRecorder) UninstallArtifact(ctx, artifactName, purge any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UninstallArtifact", reflect.TypeOf((*MockArtifactManager)(nil).UninstallArtifact), ctx, artifactName, purge)
}

// UpdateArtifact mocks base method.
func (m *MockArtifactManager) UpdateArtifact(ctx context.Context, newArtifactPath string, newDescriptor *model.IndexArtifactDescriptor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateArtifact", ctx, newArtifactPath, newDescriptor)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateArtifact indicates an expected call of UpdateArtifact.
func (mr *MockArtifactManagerMockRecorder) UpdateArtifact(ctx, newArtifactPath, newDescriptor any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateArtifact", reflect.TypeOf((*MockArtifactManager)(nil).UpdateArtifact), ctx, newArtifactPath, newDescriptor)
}

// MockDownloader is a mock of Downloader interface.
type MockDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockDownloaderMockRecorder
	isgomock struct{}
}

// MockDownloaderMockRecorder is the mock recorder for MockDownloader.
type MockDownloaderMockRecorder struct {
	mock *MockDownloader
}

// NewMockDownloader creates a new mock instance.
func NewMockDownloader(ctrl *gomock.Controller) *MockDownloader {
	mock := &MockDownloader{ctrl: ctrl}
	mock.recorder = &MockDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloader) EXPECT() *MockDownloaderMockRecorder {
	return m.recorder
}

// FetchAll mocks base method.
func (m *MockDownloader) FetchAll(ctx context.Context, items []download.Item, opts download.Options) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAll", ctx, items, opts)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll.
func (mr *MockDownloaderMockRecorder) FetchAll(ctx, items, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockDownloader)(nil).FetchAll), ctx, items, opts)
}
