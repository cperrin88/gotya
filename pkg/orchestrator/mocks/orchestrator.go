// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cperrin88/gotya/pkg/orchestrator (interfaces: IndexPlanner,ArtifactInstaller)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/orchestrator.go . IndexPlanner,ArtifactInstaller
//

// Package mock_orchestrator is a generated GoMock package.
package mock_orchestrator

import (
	context "context"
	reflect "reflect"

	index "github.com/cperrin88/gotya/pkg/index"
	model "github.com/cperrin88/gotya/pkg/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIndexPlanner is a mock of IndexPlanner interface.
type MockIndexPlanner struct {
	ctrl     *gomock.Controller
	recorder *MockIndexPlannerMockRecorder
	isgomock struct{}
}

// MockIndexPlannerMockRecorder is the mock recorder for MockIndexPlanner.
type MockIndexPlannerMockRecorder struct {
	mock *MockIndexPlanner
}

// NewMockIndexPlanner creates a new mock instance.
func NewMockIndexPlanner(ctrl *gomock.Controller) *MockIndexPlanner {
	mock := &MockIndexPlanner{ctrl: ctrl}
	mock.recorder = &MockIndexPlannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexPlanner) EXPECT() *MockIndexPlannerMockRecorder {
	return m.recorder
}

// Plan mocks base method.
func (m *MockIndexPlanner) Plan(ctx context.Context, req index.InstallRequest) (index.InstallPlan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Plan", ctx, req)
	ret0, _ := ret[0].(index.InstallPlan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Plan indicates an expected call of Plan.
func (mr *MockIndexPlannerMockRecorder) Plan(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Plan", reflect.TypeOf((*MockIndexPlanner)(nil).Plan), ctx, req)
}

// MockArtifactInstaller is a mock of ArtifactInstaller interface.
type MockArtifactInstaller struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactInstallerMockRecorder
	isgomock struct{}
}

// MockArtifactInstallerMockRecorder is the mock recorder for MockArtifactInstaller.
type MockArtifactInstallerMockRecorder struct {
	mock *MockArtifactInstaller
}

// NewMockArtifactInstaller creates a new mock instance.
func NewMockArtifactInstaller(ctrl *gomock.Controller) *MockArtifactInstaller {
	mock := &MockArtifactInstaller{ctrl: ctrl}
	mock.recorder = &MockArtifactInstallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactInstaller) EXPECT() *MockArtifactInstallerMockRecorder {
	return m.recorder
}

// InstallArtifact mocks base method.
func (m *MockArtifactInstaller) InstallArtifact(ctx context.Context, desc *model.IndexArtifactDescriptor, localPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstallArtifact", ctx, desc, localPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// InstallArtifact indicates an expected call of InstallArtifact.
func (mr *MockArtifactInstallerMockRecorder) InstallArtifact(ctx, desc, localPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallArtifact", reflect.TypeOf((*MockArtifactInstaller)(nil).InstallArtifact), ctx, desc, localPath)
}
