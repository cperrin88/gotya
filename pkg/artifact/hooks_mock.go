// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/glorpus-work/gotya/pkg/artifact (interfaces: HookExecutor)
//
// Generated by this command:
//
//	mockgen -package artifact -destination=./hooks_mock.go . HookExecutor
//

// Package artifact is a generated GoMock package.
package artifact

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHookExecutor is a mock of HookExecutor interface.
type MockHookExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockHookExecutorMockRecorder
	isgomock struct{}
}

// MockHookExecutorMockRecorder is the mock recorder for MockHookExecutor.
type MockHookExecutorMockRecorder struct {
	mock *MockHookExecutor
}

// NewMockHookExecutor creates a new mock instance.
func NewMockHookExecutor(ctrl *gomock.Controller) *MockHookExecutor {
	mock := &MockHookExecutor{ctrl: ctrl}
	mock.recorder = &MockHookExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHookExecutor) EXPECT() *MockHookExecutorMockRecorder {
	return m.recorder
}

// ExecuteHook mocks base method.
func (m *MockHookExecutor) ExecuteHook(hookPath string, context *HookContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteHook", hookPath, context)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteHook indicates an expected call of ExecuteHook.
func (mr *MockHookExecutorMockRecorder) ExecuteHook(hookPath, context any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteHook", reflect.TypeOf((*MockHookExecutor)(nil).ExecuteHook), hookPath, context)
}
