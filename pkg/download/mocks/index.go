// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cperrin88/gotya/pkg/download (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/index.go . Manager
//

// Package mock_download is a generated GoMock package.
package mock_download

import (
	context "context"
	reflect "reflect"

	download "github.com/cperrin88/gotya/pkg/download"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockManager) Fetch(ctx context.Context, item download.Item, opts download.Options) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, item, opts)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockManagerMockRecorder) Fetch(ctx, item, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockManager)(nil).Fetch), ctx, item, opts)
}

// FetchAll mocks base method.
func (m *MockManager) FetchAll(ctx context.Context, items []download.Item, opts download.Options) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAll", ctx, items, opts)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll.
func (mr *MockManagerMockRecorder) FetchAll(ctx, items, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockManager)(nil).FetchAll), ctx, items, opts)
}
