// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cperrin88/gotya/pkg/index (interfaces: Manager,Package)
//
// Generated by this command:
//
//	mockgen -destination=./mocks/index.go . Manager,Package
//

// Package mock_index is a generated GoMock package.
package mock_index

import (
	context "context"
	url "net/url"
	reflect "reflect"
	time "time"

	index "github.com/cperrin88/gotya/pkg/index"
	go_version "github.com/hashicorp/go-version"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
	isgomock struct{}
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// FindPackages mocks base method.
func (m *MockManager) FindPackages(name string) (map[string][]*index.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindPackages", name)
	ret0, _ := ret[0].(map[string][]*index.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindPackages indicates an expected call of FindPackages.
func (mr *MockManagerMockRecorder) FindPackages(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindPackages", reflect.TypeOf((*MockManager)(nil).FindPackages), name)
}

// GetCacheAge mocks base method.
func (m *MockManager) GetCacheAge(name string) (time.Duration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheAge", name)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCacheAge indicates an expected call of GetCacheAge.
func (mr *MockManagerMockRecorder) GetCacheAge(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheAge", reflect.TypeOf((*MockManager)(nil).GetCacheAge), name)
}

// GetIndex mocks base method.
func (m *MockManager) GetIndex(name string) (*index.Index, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIndex", name)
	ret0, _ := ret[0].(*index.Index)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIndex indicates an expected call of GetIndex.
func (mr *MockManagerMockRecorder) GetIndex(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIndex", reflect.TypeOf((*MockManager)(nil).GetIndex), name)
}

// IsCacheStale mocks base method.
func (m *MockManager) IsCacheStale(name string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCacheStale", name)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCacheStale indicates an expected call of IsCacheStale.
func (mr *MockManagerMockRecorder) IsCacheStale(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCacheStale", reflect.TypeOf((*MockManager)(nil).IsCacheStale), name)
}

// ResolvePackage mocks base method.
func (m *MockManager) ResolvePackage(name, version, os, arch string) (*index.Package, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolvePackage", name, version, os, arch)
	ret0, _ := ret[0].(*index.Package)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolvePackage indicates an expected call of ResolvePackage.
func (mr *MockManagerMockRecorder) ResolvePackage(name, version, os, arch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolvePackage", reflect.TypeOf((*MockManager)(nil).ResolvePackage), name, version, os, arch)
}

// Sync mocks base method.
func (m *MockManager) Sync(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockManagerMockRecorder) Sync(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockManager)(nil).Sync), ctx, name)
}

// SyncAll mocks base method.
func (m *MockManager) SyncAll(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncAll", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncAll indicates an expected call of SyncAll.
func (mr *MockManagerMockRecorder) SyncAll(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncAll", reflect.TypeOf((*MockManager)(nil).SyncAll), ctx, name)
}

// MockPackage is a mock of Package interface.
type MockPackage struct {
	ctrl     *gomock.Controller
	recorder *MockPackageMockRecorder
	isgomock struct{}
}

// MockPackageMockRecorder is the mock recorder for MockPackage.
type MockPackageMockRecorder struct {
	mock *MockPackage
}

// NewMockPackage creates a new mock instance.
func NewMockPackage(ctrl *gomock.Controller) *MockPackage {
	mock := &MockPackage{ctrl: ctrl}
	mock.recorder = &MockPackageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPackage) EXPECT() *MockPackageMockRecorder {
	return m.recorder
}

// GetArch mocks base method.
func (m *MockPackage) GetArch() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArch")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetArch indicates an expected call of GetArch.
func (mr *MockPackageMockRecorder) GetArch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArch", reflect.TypeOf((*MockPackage)(nil).GetArch))
}

// GetUrl mocks base method.
func (m *MockPackage) GetUrl() *url.URL {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrl")
	ret0, _ := ret[0].(*url.URL)
	return ret0
}

// GetUrl indicates an expected call of GetUrl.
func (mr *MockPackageMockRecorder) GetUrl() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrl", reflect.TypeOf((*MockPackage)(nil).GetUrl))
}

// GetVersion mocks base method.
func (m *MockPackage) GetVersion() *go_version.Version {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersion")
	ret0, _ := ret[0].(*go_version.Version)
	return ret0
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockPackageMockRecorder) GetVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockPackage)(nil).GetVersion))
}

// MatchArch mocks base method.
func (m *MockPackage) MatchArch(arch string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchArch", arch)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MatchArch indicates an expected call of MatchArch.
func (mr *MockPackageMockRecorder) MatchArch(arch any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchArch", reflect.TypeOf((*MockPackage)(nil).MatchArch), arch)
}

// MatchOs mocks base method.
func (m *MockPackage) MatchOs(os string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchOs", os)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MatchOs indicates an expected call of MatchOs.
func (mr *MockPackageMockRecorder) MatchOs(os any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchOs", reflect.TypeOf((*MockPackage)(nil).MatchOs), os)
}

// MatchVersion mocks base method.
func (m *MockPackage) MatchVersion(versionConstraint string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MatchVersion", versionConstraint)
	ret0, _ := ret[0].(bool)
	return ret0
}

// MatchVersion indicates an expected call of MatchVersion.
func (mr *MockPackageMockRecorder) MatchVersion(versionConstraint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchVersion", reflect.TypeOf((*MockPackage)(nil).MatchVersion), versionConstraint)
}
