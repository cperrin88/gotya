version: '3'

vars:
  BIN_DIR: ./bin
  COVER_PROFILE: coverage.out
  LINT_CONFIG: .golangci.yml

env:
  GO111MODULE: on
  CGO_ENABLED: 0

tasks:
  # Build tasks
  build:
    desc: Build the project
    cmds:
      - go build -o {{.BIN_DIR}}/gotya ./cmd/gotya

  install:
    desc: Install the application
    cmds:
      - go install ./cmd/gotya

  # Test tasks
  test:
    desc: Run all tests
    env:
      CGO_ENABLED: "0"
    cmds:
      - go test -short ./...

  test-integration:
    desc: Run integration tests
    env:
      CGO_ENABLED: "0"
    cmds:
      - go test -tags=integration ./...

  test-all:
    desc: Run all tests including integration tests
    cmds:
      - task: test
      - task: test-integration

  test-cover:
    desc: Run tests and show coverage
    cmds:
      - task: test
      - go tool cover -func={{.COVER_PROFILE}}

  test-cover-html:
    desc: Generate HTML coverage report
    cmds:
      - go tool cover -html={{.COVER_PROFILE}} -o coverage.html

  mutate:
    desc: Run mutation testing on the codebase
    deps: [test]  # Ensure tests pass before mutation testing
    cmds:
      - go install github.com/avito-tech/go-mutesting/cmd/go-mutesting@latest
      - go-mutesting --exec "go test -v" ./...

  mutate-verbose:
    desc: Run mutation testing with verbose output
    deps: [test]
    cmds:
      - go install github.com/avito-tech/go-mutesting/cmd/go-mutesting@latest
      - go-mutesting --debug --exec "go test -v" ./...

  # Lint and format
  lint:
    desc: Run linters
    cmds:
      - golangci-lint run --config {{.LINT_CONFIG}} ./...

  fmt:
    desc: Format Go code
    cmds:
      - go fmt ./...

  tidy:
    desc: Tidy Go modules
    cmds:
      - go mod tidy

  # Cleanup
  clean:
    desc: Clean build artifacts
    cmds:
      - go clean
      - rm -rf {{.BIN_DIR}} {{.COVER_PROFILE}} coverage.html

  # CI/CD
  ci:
    desc: Run CI pipeline (test, lint, build)
    cmds:
      - task: test
      - task: lint
      - task: build

  # GitHub Actions Local Testing with act
  act-list:
    desc: List available act workflows
    cmds:
      - act -l

  act-integration-test:
    desc: Run integration tests locally using act (Ubuntu only)
    cmds:
      - act -j integration-test --matrix "os:ubuntu-latest"

  act-integration-test-windows:
    desc: Run integration tests on Windows using act
    cmds:
      - act -j integration-test --matrix "os:windows-latest"

  act-integration-test-all:
    desc: Run integration tests on all platforms locally using act
    cmds:
      - act -j integration-test --matrix "os:ubuntu-latest,windows-latest,macos-latest"

  act-ci:
    desc: Run full CI workflow locally using act
    cmds:
      - act

  act-ci-all:
    desc: Run full CI workflow on all platforms
    cmds:
      - act --matrix "os=ubuntu-latest,windows-latest,macos-latest"

  # Alias for convenience
  test-local: act-integration-test
  test-local-all: act-integration-test-all

  check:
    desc: Run all checks (lint, test, build)
    deps: [lint, test]
